/* 
	USERS TABLE 

	EACH USER SHOULD HAVE A PERSON RECORD.

*/
CREATE SEQUENCE USERSEQ;

CREATE TABLE USERS (
	ID VARCHAR2(10) NOT NULL, 
	ROWSTAMP VARCHAR2(10) NOT NULL,
	USERLOGIN VARCHAR2(100),
	PASSWORD VARCHAR2(64),
	PASSWORDEXPIRATION TIMESTAMP,
	FORCEEXPIRATION NUMBER(1) DEFAULT 0 NOT NULL,
	ISACTIVE NUMBER(1) DEFAULT 1 NOT NULL,
	PRIMARY KEY (ID),
	CONSTRAINT USERS_U1 UNIQUE (USERLOGIN),
	CONSTRAINT USERS_U2 UNIQUE (INVITATIONEMAIL),
	CONSTRAINT USERS_U3 UNIQUE (PERSONID)
);

CREATE OR REPLACE TRIGGER USERS_T 
BEFORE INSERT OR UPDATE ON USERS
FOR EACH ROW
DECLARE 
	OBJECTMODIFICATION EXCEPTION;
	INVALIDDATA EXCEPTION;
BEGIN
	IF UPDATING AND NOT :NEW.ROWSTAMP = :OLD.ROWSTAMP THEN
		RAISE OBJECTMODIFICATION;
	END IF;

	IF INSERTING THEN 
		SELECT DBMS_RANDOM.STRING('U',10) INTO :NEW.SECRETKEY FROM DUAL;
	END IF;
	
	SELECT DBMS_RANDOM.STRING('U',10) INTO :NEW.ROWSTAMP FROM DUAL;
	EXCEPTION 
	   WHEN OBJECTMODIFICATION THEN
		RAISE_APPLICATION_ERROR(-20100,'Record has been modified by another user');
	   WHEN INVALIDDATA THEN
	    RAISE_APPLICATION_ERROR(-20099,'Invalid Data');
END;
/

CREATE MATERIALIZED VIEW LOG ON USERS WITH ROWID, PRIMARY KEY;
ALTER MATERIALIZED VIEW LOG FORCE ON USERS ADD ROWID;

/*
CREATE INDEX USERS_IDX1 ON USERS (USERLOGIN, ISACTIVE);
CREATE INDEX USERS_IDX2 ON USERS (ID, ISACTIVE);
CREATE INDEX USERS_IDX3 ON USERS (ID, INITIALIZED);
CREATE INDEX USERS_IDX4 ON USERS (USERLOGIN, INITIALIZED);
CREATE INDEX USERS_IDX5 ON USERS (NOTIFYBYEMAIL);
CREATE INDEX USERS_IDX6 ON USERS (NOTIFYBYEMAIL, ISACTIVE);
CREATE INDEX USERS_IDX7 ON USERS (PERSONID, ISACTIVE);
CREATE INDEX USERS_IDX8 ON USERS (USERLOGIN, VERIFIER);
CREATE INDEX USERS_IDX9 ON USERS (UPPER(USERLOGIN), ISACTIVE);
*/


